
spring全家桶：spring，springMVC,spring boot, spring cloud
	
  spring:出现在2002年左右，解决企业开发的难度。减轻对项目模块之间的管理，
	类和类之间的管理，帮助开发人员创建对象，管理对象之间的关系。
	spring核心技术：ioc，aop。能实现模块之间，类之间的解耦合。


依赖：class A中使用class B的属性或者方法，叫做class A依赖class B

-------------------------------------------------------------------------

框架怎么学：框架是一个软件，其他人写好的软件。
1）知道框架能做什么，mybatis--访问数据库，对表中的数据执行增删改查。
2）框架的语法，框架要完成一个功能，需要一定的步骤支持，
3）框架的内部实现，框架内部怎么做，原理是什么。
4）通过学习，可以实现一个框架。

spring的第一个核心功能 IOC

IOC（inversion of control)：控制反转，是一个理论，概念，思想。
描述的：把对象的创建赋值，管理工作都交给代码之外的容器实现，也就是对象的创建是由其他外部资源完成。

控制：创建对象，对象的属性赋值，对象之间的关系管理。
反转：把原来的开发人员管理，创建对象的权限转移给代码之外的容器来实现，由容器代替开发人员管理对象，创建对象，
      给属性赋值

正转：由开发人员在代码中使用new构造方法创建对象，开发人员主动管理对象。
	public static void main(String args[]){
		Student student = new Student(); //  在代码中，创建对象。 --正转。
	}


容器：是一个服务器软件，一个框架（spring）

为什么要使用IOC：目的就是减少对代码的改动，也能实现不同的功能。实现解耦合。

java中创建对象有哪些方式：
  1.构造方法，new Student()
  2.反射
  3.序列化
  4.克隆
  5.IOC：容器创建对象
  6.动态代理


IOC的体现：
  servlet 1：创建类继承HttpServlet
	  2：在web.xml 注册servlet ,使用<servlet-name> myservlet </servlet-name>
					<servlet-class>com.controller.MyServlet</servlet-class>

	  3.没有创建Servlet对象，没有MyServlet myservlet = new MyServlet();

	  4.servlet 是Tomcat服务器为你创建的。Tomcat也称为容器
	    Tomcat作为容器：里面存放的有Servlet 对象，Listener，Filter对象


IOC的技术实现：
  DI是IOC的技术实现，
  DI(Dependency Injection)：依赖注入，只需要在程序中提供要使用的对象名称就可以，至于对象如何在容器中创建，
			    赋值，查找都由容器内部实现。


spring是使用的DI实现了IOC的功能，spring底层创建对象，使用的是反射机制

spring是一个容器，管理对象，给属性赋值，底层是反射创建对象。


junit:单元测试，一个工具类库，做测试方法使用的。
  单元：指定的方法，一个类中有很多方法，一个方法称为单元。

  使用单元测试
    1.需要加入junit依赖
    2.创建测试作用的类，叫做测试类
      src/test/java目录中创建类
    
    3.创建测试方法

     1）public方法
     2）没有返回值 void
     3）方法名称自定义
     4）方法没有参数
     5）方法的上面加入 @Test,这样的方法是可以单独执行的，不用使用main方法。

     ------------------------------------------------------------------------------

1.多个配置文件优势
   1.每个文件的大小比一个文件要小很多，效率高
   2.避免多人竞争带来的冲突。

     2.多文件的分配方式
        1.按功能模块，一个模块一个配置文件
	2.按类的功能，数据库相关的配置一个配置文件，做事务的功能一个配置文件，做service功能的一个配置文件等


2.基于注解的di：通过注解完成java对象创建，属性赋值
   使用注解的步骤：
	1.加入maven的依赖 spring-context，在你加入spring-context的同时，间接加入了spring-aop的依赖。
	  使用注解必须使用spring-aop依赖

	2.在类中加入spring的注解（多个不同功能的注解）

	3.在spring的配置文件中，加入一个组件扫描器的标签，说明注解在你项目中的位置

	学习的注解：
	  1.@Component
	  2.@Respotory
	  3.@Service
	  4.@Controller
	  5.@Value
	  6.@Autowired
	  7.@Resource

用户处理请求：
     用户form，参数name，age-----servlet（接收请求name,age）----service类（处理name，age操作）----dao类（访问数据库）

==============================================================================================================================
第三章 aop

1.动态代理
   实现方式：JDK动态代理，使用JDK中的proxy，Method,InvocationHandler创建代理对象。
	     JDK动态代理要求目标类必须实现接口。
	 
    cglib动态代理：第三方的工具库，创建代理对象，原理是继承，通过继承目标类，创建子类。
		子类就是代理对象。要求目标不能是final的，方法也不能是final的。


2.动态代理的作用：
    1）在目标类源代码不改变的情况下，增加功能。
    2）减少代码的重复。
    3）专注业务逻辑代码
    4）解耦合，让你业务功能和非业务功能分离。


3.aop：面向切面编程，基于动态代理的，可以使用JDK，cglib两种代理方式。
  aop就是动态代理的规范化，把动态代理的实现步骤，方式都定义好了，让开发人员用一种
  统一的方式，就用动态代理。


4.aop（Aspect orient Programming）面向切面编程
  Aspect：切面，给你的目标类增加的功能，就是切面，像日志，事务都是切面。
	   切面的特点：一般都是非业务方法，独立使用的。

  Orient：面向，对着。

  Programming：编程


  怎么理解面向切面编程 ？
    1）需要在分析项目功能时，找出切面。
    2）合理的安排切面的执行时间（在目标方法前，还是目标方法后）
    3）合理的安排切面执行的位置，在哪个类，哪个方法增加增强功能


术语：
  1）Aspect：切面，表示增强的功能，就是一堆代码，完成一个功能，非业务功能，
              常见的切面功能有日志，事务，统计信息，参数检查，权限验证。
	   
  2）JoinPoint：连接点，连接业务方法和切面的位置。就是某个类中的业务方法。
  3）Pointcut：切入点，指多个连接点方法的集合。多个方法
  4）目标对象：给哪个类的方法增加功能，这个类就是目标对象
  5）Advice：通知，通知表示切面功能的执行时间


  一个切面有三个关键的要素：
  1）切面的功能代码，切面干什么
  2）切面的执行位置，使用pointcut表示切面的执行位置
  3）切面的执行时间，使用Advice表示时间，在目标方法之前还是之后


5.aop的实现
  aop是一个规范，是动态代理的一个规范化，一个标准
  aop的技术实现框架：
   1）spring：spring在内部实现了aop规范，能做aop的工作。
              spring主要在事务处理时使用aop。
	      我们项目开发中很少使用spring的aop实现。因为spring的aop比较笨重。

   2）aspectJ：一个开源的专门做aop的框架。spring框架中集成了aspectJ框架，通过spring就能使用aspectJ的功能。
         aspectJ框架实现aop有两种方式：
	  1.使用XML的配置文件
	  2.使用注解，我们在项目中要做aop功能，一般都使用注解，aspectJ有5个注解。


6.学习aspectJ框架的使用。
   1）切面的执行时间，执行时间在规范中叫做Advice（通知，增强）
       在aspectJ框架中使用注解表示的，也可以使用XML配置文件中的标签
       1）@Before
       2）@AfterReturning
       3）@Around
       4）@AfterThrowing
       5）@After


   2）表示切面执行的位置，使用切入点表达式。